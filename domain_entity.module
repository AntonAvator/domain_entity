<?php

/**
 * @file
 * Defines fields (e.g. domain_entity) for entities
 */

/**
* Domain entity behavior widget type, add a hidden field on entity.
* entity is automatically assigned to the current domain. (invisible for user)
* @var domain_entity
*/
define('DOMAIN_ENTITY_BEHAVIOR_AUTO', 'domain_entity_auto_hidden');

/**
 * Domain entity behavior widget type, add a field on entity creation form,
 * allowing user to choose entity affiliation on creation/update form.
 * @var domain_entity
 */
define('DOMAIN_ENTITY_BEHAVIOR_USER', 'domain_entity_user_multiple_choice');

/**
* Return the list of the domain_entity fieldable entity types
*
* Other module can use hook_domain_entity_allowed_entity_types_alter,
* to add other entity types, just doing that is not enough to enable the domain filter,
* an instance of the field type domain_entity must be created for new entity_type
* @see domain_entity_types_enable_domain_field(array('entity_type', ...));
*
* @return array list of entity types
*/
function domain_entity_allowed_entity_types() {
  // First check the static cache for a domain_entity allowed entity types array.
  $domain_entity_allowed_entity_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($domain_entity_allowed_entity_types)) {
    $domain_entity_allowed_entity_types = array(
    );
    drupal_alter('domain_entity_allowed_entity_types', $domain_entity_allowed_entity_types);
  }

  return $domain_entity_allowed_entity_types;
}

/**
* Alter an entity access query, add Commerce Domain Access Rules
*
* Can be called by modules implementing entity domain access.
* Must be called for the entity specific access query,
* inside a hook_query_alter or hook_query_TAG_alter
*
* @param $entity_type
*/
function domain_entity_query_alter(&$query) {
  if(method_exists($query, 'getMetaData')) {
    if (!$base_table = $query->getMetaData('base_table')) {
      // Assume that the base table if the first table if not set. It will result
      // in an invalid query if the first table is not the table we expect,
      // forcing the caller to actually properly pass a base table in that case.
      $tables = &$query->getTables();
      $base_table = key($tables);
    }
    // have we to check access for this entity types
    if (!in_array($base_table, array_keys(domain_entity_allowed_entity_types()))) {
      return;
    }

    $entity_type = $base_table;
    $domain = domain_get_domain();
    $entity_info = entity_get_info($entity_type);
    $entity_key = $entity_info['entity keys']['id'];
    $field_instance = domain_entity_entity_field_instance($entity_type);
    $field_instance_name = $field_instance['name'];
    // add our access condition:
    $query->leftJoin('field_data_' . $field_instance_name, 'dom', $base_table . '.' . $entity_key . ' = %alias.entity_id');
    $query->condition('dom.' . $field_instance_name . '_domain_id', $domain['domain_id'], '=');
  }
}

/**
 * Implements hook_entity_presave
 *
 * @param Entity $entity
 * @param $type
 */
function domain_entity_entity_presave($entity, $type) {
  // Check if it's an allowed entity types:
  $allowed_entity_types = domain_entity_allowed_entity_types();
  if (!in_array($type, array_keys($allowed_entity_types))) {
    return;
  }
  // Get domain_entity field type instances:
  $field_instance = domain_entity_entity_field_instance($type);
  $field_instance_name = $field_instance['name'];
  // get current domain:
  $current_domain = domain_get_domain();
  // ensure this entities have almost a default value.
  // attach it to current domain if the entity is created by bypassing entity creation form
  // do not let an unset domain entity saved (or the entity became inaccessible)
  if (isset($entity->$field_instance_name)) {
    // populate field instance with the current domain ID,
    // if is not already set or unassigned
    $value = $entity->$field_instance_name;

    if (empty($value) || !isset($value[LANGUAGE_NONE][0]) || !$value[LANGUAGE_NONE][0]['domain_id']) {
      $value[LANGUAGE_NONE] = array(
        0 => array(
          'domain_id' => $current_domain['domain_id'],
        )
      );
      // Save domain_entity field value into entity
      $entity->$field_instance_name = $value;
    }
  } else {

    $entity->$field_instance_name = array(
      LANGUAGE_NONE => array (
        0 => array(
        'domain_id' => $current_domain['domain_id'],
        ),
      ),
    );
  }
  return $entity;
}

/**
 * Get the list of domain_entity field type instances
 * @return Array of key(field_id) => field_instance_name
 */
function domain_entity_field_instances() {
  // First check the static cache for a domain_entity field instances array.
  $domain_entity_field_instances = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($domain_entity_field_instances)) {
    $query = db_select('field_config', 'fc');
    $query->condition('fc.type', 'domain_entity', '=');
    $query->condition('fc.active', TRUE, '=');
    $query->fields('fc', array('id', 'field_name'));
    $domain_entity_field_instances = $query->execute()->fetchAll(PDO::FETCH_KEY_PAIR);
  }

  return $domain_entity_field_instances;
}

/**
* Get the list of domain_entity field type instances
* @return String the name of the bundle field instance
*/
function domain_entity_entity_field_instance($entity_type) {
  // First check the static cache for a domain_entity field instances array.
  $domain_entity_entity_field_instance = &drupal_static(__FUNCTION__);
  // If it did not exist, init the array.
  if (!isset($domain_entity_entity_field_instance)) {
    $domain_entity_entity_field_instance = array();
  }
  // look for the instance for this type if it's not done
  if (!isset($domain_entity_entity_field_instance[$entity_type])) {
    $domain_entity_field_instances = domain_entity_field_instances();
    $query = db_select('field_config_instance', 'fci');
    $query->condition('fci.entity_type', $entity_type, '=');
    $query->condition('fci.field_name', $domain_entity_field_instances, 'IN');
    $query->fields('fci', array('field_name','data'));
    $field_instance = $query->execute()->fetchAll();
    $domain_entity_entity_field_instance[$entity_type] = array(
      'name' => $field_instance[0]->field_name,
      'settings' => unserialize($field_instance[0]->data),
    );
  }

  return $domain_entity_entity_field_instance[$entity_type];
}

/**
 * Implements hook_field_info().
 */
function domain_entity_field_info() {
  return array(
    'domain_entity' => array(
      'label' => t('Domain'),
      'description' => t('This field stores the domain ID\'s.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => DOMAIN_ENTITY_BEHAVIOR_AUTO,
      'default_formatter' => 'hidden',
      'property_type' => 'domain_entity',
      'property_callbacks' => array('domain_entity_property_info_callback'),
    ),
  );
}

/**
* Implements of hook_field_is_empty().
*/
function domain_entity_field_is_empty($item, $field) {
  if ($field['type'] == 'domain_entity') {
    return !isset($item['domain_id']) || $item['domain_id'] == NULL;
  }
}

/**
* Implements hook_field_widget_info().
*/
function domain_entity_field_widget_info() {
  return array(
    DOMAIN_ENTITY_BEHAVIOR_AUTO => array(
      'label' => t('Affiliate automatically created entity to current domain'),
      'field types' => array('domain_entity'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    // this widget allow multiple domain attachment
    DOMAIN_ENTITY_BEHAVIOR_USER => array(
      'label' => t('User choose affiliate (default value is current domain)'),
      'field types' => array('domain_entity'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
* Implements hook_field_widget_error().
*/
function domain_entity_field_widget_error($element, $error, $form, &$form_state) {
  if ($error['error'] == 'domain_entity') {
    form_error($element['domain_id'], $error['message']);
  }
}

/**
* Implements hook_field_widget_form().
*/
function domain_entity_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $current_domain = domain_get_domain();
  // Return the domain_id textfield widget.
  if ($widget['type'] == DOMAIN_ENTITY_BEHAVIOR_AUTO || $widget['type'] == DOMAIN_ENTITY_BEHAVIOR_USER) {
    // Determine the default domain_id value.
    $default_value = array();
    $delta = 0;
    $site_domains = domain_domains();
    $checkboxes = array();

    foreach ($site_domains as $site_domain) {
      $checkboxes[$site_domain['domain_id']] = $site_domain['sitename'];
      if (isset($items[$delta]) && !empty($items[$delta]) && isset($items[$delta]['domain_id']) && $items[$delta]['domain_id'] == $site_domain['domain_id']) {
        $default_value[$site_domain['domain_id']] = $site_domain['domain_id'];
      } elseif (isset($items[$delta]) && !empty($items[$delta])) {
        $default_value[$site_domain['domain_id']] = 0;
      }
      $delta++;
    }
    // set the current domain as default value if no default value has been sent :
    if (!isset($items[$delta]) || empty($items[$delta]) || !isset($items[$delta]['domain_id'])) {
      $default_value[$current_domain['domain_id']] = $current_domain['domain_id'];
    }

    // Add a checkboxes for domain id's:
    $element['domain_id'] = array(
      '#type' => 'checkboxes',
      '#options' => $checkboxes,
      '#title' => t('Domain'),
      '#default_value' => $default_value,
      '#required' => TRUE,
      '#element_validate' => array('domain_entity_widget_multiple_values_form_validate'),
      '#entity_type' => $instance['entity_type'],
    );
    if($widget['type'] == DOMAIN_ENTITY_BEHAVIOR_AUTO) {
      $element['domain_id']['#access'] = FALSE;
    }
    return $element;
  }
}
/**
 * Widget DOMAIN_ENTITY_BEHAVIOR_USER form validate,
 * handle checkboxes to save it as multiple field values (delta).
 * @param unknown_type $element
 * @param unknown_type $form_state
 * @param unknown_type $form
 */
function domain_entity_widget_multiple_values_form_validate($element, &$form_state, $form) {
  $entity_type = isset($element['#entity_type']) ? $element['#entity_type'] : FALSE;
  if (!in_array($entity_type, array_keys(domain_entity_allowed_entity_types()))) {
    return;
  }
  $values = $element['#value'];
  $active_domain = array();
  foreach ($values as $domain_id => $active) {
    if($active) {
      $active_domain[] = array('domain_id' => $domain_id);
    }
  }
  $items = array();
  foreach ($active_domain as $domain) {
    $items[] = $domain;
  }
  // Emulate multivalue field. Unset last parent to prevent errors.
  array_pop($element['#parents']);
  form_set_value($element, $items, $form_state);
}

/**
* Implements hook_form_FORM_ID_alter().
*/
function domain_entity_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'domain_entity') {
    $form['instance']['required']['#default_value'] = TRUE;
    $form['instance']['required']['#disabled'] = TRUE;
    $form['field']['cardinality']['#value'] = FIELD_CARDINALITY_UNLIMITED;
    $form['field']['cardinality']['#disabled'] = TRUE;
    $form['field']['cardinality']['#description'] = t('This field widget allow only unlimited values (in fact it will be the number of active domain).');
  }
}

/**
* Implements hook_field_formatter_info().
*/
function domain_entity_field_formatter_info() {
  return array(
    'domain_entity_formatted' => array(
      'label' => t('Hidden (domain id)'),
      'field types' => array('domain_entity'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function domain_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = array_merge(field_info_formatter_settings($display['type']), $display['settings']);

  $element = array();
  // Loop through each item in this field.
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#type' => 'hidden',
    );
  }

  return $element;
}

/**
* Callback to alter the property info of domain fields.
*
* @see domain_entity_field_info().
*/
function domain_entity_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<domain_entity>' : 'domain_entity';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['property info'] = domain_entity_field_data_property_info($name);

  unset($property['query callback']);
  unset($property['auto creation']);
}

/**
 * Defines info for the properties of the domain_entity field data structure.
 */
function domain_entity_field_data_property_info($name = NULL) {
  return array(
    'domain_id' => array(
      'label' => t('Domain ID'),
      'description' => !empty($name) ? t('Domain ID value of field %name', array('%name' => $name)) : '',
      'type' => 'int',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );
}

/**
 * Create a field instance
 * @param $field_name
 * @param $field_type
 * @param $required
 * @param $entity_type
 * @param $bundle
 * @param $label
 * @param $description
 * @param $weight
 */
function domain_entity_create_field_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, $widget, $description = NULL, $weight = 0) {
  // Look for or add the specified stock field to the requested entity bundle.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => 1,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => FALSE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'required' => $required,
      'settings' => array(),
      'display' => array(),
      'description' => $description,
      'default_value' => array(array('value' => 0)),
      'widget' => array(
        'type' => $widget
      ),
    );

    $entity_info = entity_get_info($entity_type);

    // Spoof the default view mode so its display type is set.
    $entity_info['view modes']['default'] = array();

    field_create_instance($instance);
  }
}

/**
 * Helper function to active the domain field on all bundle of a list of entity type
 * @param unknown_type $entity_types
 */
function domain_entity_types_enable_domain_field($entity_types) {
  // common settings
  $field_type = 'domain_entity';
  $label = t('Domain');
  $required = FALSE;
  // create fields instance
  foreach ($entity_types as $entity_type => $widget) {
    $field_name = 'domain_' . $entity_type;
    if(strlen($field_name)> 21) {
      $field_name = substr('domain_' . md5($field_name), 0, -7);
    }
    $entity_info = entity_get_info($entity_type);
    $bundles = $entity_info['bundles'];
    foreach ($bundles as $bundle => $bundle_info) {
      domain_entity_create_field_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, $widget);
      drupal_set_message(t('Domain Access has been enabled on the bundle @type of @entity entity type', array('@type' => $bundle, '@entity' => $entity_type)));
    }
  }
}