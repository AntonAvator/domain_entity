<?php

/**
 * @file
 * Defines field (e.g. domain_entity) for entities
 * and access query alter
 */

/**
 * Domain entity behavior widget type, add a hidden field on entity.
 * entity is automatically assigned to the current domain. (invisible for user)
 * @var domain_entity
 */
define('DOMAIN_ENTITY_BEHAVIOR_AUTO', 'domain_entity_auto_hidden');

/**
 * Domain entity behavior widget type, add a field on entity creation form,
 * allowing user to choose entity affiliation on creation/update form.
 * @var domain_entity
 */
define('DOMAIN_ENTITY_BEHAVIOR_USER', 'domain_entity_user_multiple_choice');

/**
 * Implements hook_menu().
 */
function domain_entity_menu() {
  $items = array();
  // Register the batch actions as menu callbacks.
  $items['admin/structure/domain/entities'] = array(
    'title' => 'Entities',
    'access arguments' => array('administer domains'),
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('domain_entity_ui'),
    'page callback' => 'drupal_get_form',
    'file' => 'domain_entity.admin.inc',
    'description' => 'Enable or Disable domain on entities / Configure domain entities behavior.',
    'weight' => -5,
  );

  return $items;
}


/**
 * Implements hook_permission().
 *
 * Define domain entity permissions.
 */
function domain_entity_permission() {
  return array(
    'access entities affiliate on assigned domains' => array(
      'title' => t("access and filter entities affiliate on user's assigned domains"),
      'description' => t('Allow an editor of multiple domains to access entities on different domain.'),
      'restrict access' => TRUE,
    ),
    'set domain access status for all entities' => array(
      'title' => t('Set domain access status for all entities'),
      'description' => t('Allow editor to edit & set domain access for all entities type.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Return the list of the domain_entity fieldable entity types.
 *
 * @return array
 *   List of entity types.
 */
function domain_entity_allowed_entity_types() {
  return variable_get('domain_entity_allowed_entity_types', array());
}

/**
 * Return each base table of the allowed entity type.
 */
function domain_entity_allowed_entity_types_base_tables() {
  // First check the static cache for a domain_entity field instances array.
  $domain_entity_allowed_entity_types_base_tables = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($domain_entity_allowed_entity_types_base_tables)) {
    $domain_entity_allowed_entity_types_base_tables = array();
    $domain_entity_allowed_entity_types = domain_entity_allowed_entity_types();
    foreach ($domain_entity_allowed_entity_types as $entity_name => $bundles) {
      $entity_info = entity_get_info($entity_name);
      $domain_entity_allowed_entity_types_base_tables[$entity_info['base table']] = $entity_name;
    }
  }

  return $domain_entity_allowed_entity_types_base_tables;
}

/**
 * Implements hook_query_alter().
 *
 * Alter the enabled entities select query,
 * add domain access conditions.
 */
function domain_entity_query_alter($query) {
  if (method_exists($query, 'getTables')) {
    $tables = $query->getTables();
    $base_table_alias = key($tables);
    $base_table = $tables[$base_table_alias]['table'];

    // Have we to check access for this entity types.
    $domain_entity_bases_table = domain_entity_allowed_entity_types_base_tables();
    if (!in_array($base_table, array_keys($domain_entity_bases_table))) {
      return;
    }

    // This is an enabled domain entity,
    // prepare our custom access conditions.
    // Get the current user list of granted domain id:
    // the current domain id OR for middle-office editors:
    // the list of assigned domain(s) id.
    global $user;
    $current_domain = domain_get_domain();
    $accessible_domain_ids = array($current_domain['domain_id']);
    // Middle office editors with permission see in administration,
    // entity from her lists of assigned domains.
    if (path_is_admin(current_path()) && user_access('access entities affiliate on assigned domains')) {
      $accessible_domain_ids = domain_get_user_domains($user);
    }

    // Get the entity_type for this base_table:
    $entity_type = $domain_entity_bases_table[$base_table];
    // Get entity_type and field info:
    $entity_info = entity_get_info($entity_type);
    $entity_key = $entity_info['entity keys']['id'];
    $field_instance = domain_entity_entity_field_instance($entity_type);
    $field_instance_name = $field_instance['name'];

    // Add our access condition:
    $query->leftJoin('field_data_' . $field_instance_name, 'dom', $base_table_alias . '.' . $entity_key . ' = %alias.entity_id');
    $query->condition('dom.' . $field_instance_name . '_domain_id', $accessible_domain_ids, 'IN');
  }
}
/**
 * Implements hook_entity_presave().
 *
 * @param Entity $entity
 * @param $type
 */
function domain_entity_entity_presave($entity, $type) {
  // Check if it's an allowed entity types:
  $allowed_entity_types = domain_entity_allowed_entity_types();
  if (!in_array($type, array_keys($allowed_entity_types))) {
    return;
  }
  // Get domain_entity field type instances:
  if($field_instance = domain_entity_entity_field_instance($type)) {
    $field_instance_name = $field_instance['name'];
  } else {
    return FALSE;
  }

  // Get current domain:
  $current_domain = domain_get_domain();
  $entity_info = entity_get_info($type);
  // Get default bundle value
  // e.g (all, current_domain, list(domain_id))
  $bundle_key = $entity_info['entity keys']['bundle'];
  $default_values = reset($allowed_entity_types[$type][$entity->$bundle_key]);
  $default_values = isset($allowed_entity_types[$type][$entity->$bundle_key])
                    ? reset($allowed_entity_types[$type][$entity->$bundle_key])
                    : array();
  if (in_array('all', $default_values)) {
    $values = array();
    $domains = domain_domains();
    foreach ($domains as $domain) {
      $values[] = array(
        'domain_id' => $domain['domain_id'],
      );
    }
  }
  elseif (in_array('current_domain', $default_values)) {
    $values = array(
      0 => array(
        'domain_id' => $current_domain['domain_id'],
      ),
    );
  }
  else {
    $values = array();
    foreach ($default_values as $did) {
      $values[] = array(
        'domain_id' => $did,
      );
    }
  }
  // Ensure this entities have almost a default value.
  // Attach it to current domain if the entity is created by bypassing entity creation form,
  // do not let an unset domain entity saved (or the entity became inaccessible everywhere).
  if (!isset($entity->$field_instance_name)) {
    // Populate field instance with the default bundle domain value,
    // if is not already set or unassigned.
    $entity->$field_instance_name = array(
      LANGUAGE_NONE => $values
    );
  } else {
    // Populate field instance with the default bundle domain value,
    // if is not already set or unassigned.
    $value = $entity->$field_instance_name;
    if (empty($value) || !isset($value[LANGUAGE_NONE][0]) || !$value[LANGUAGE_NONE][0]['domain_id']) {
      $entity->$field_instance_name = array(
        LANGUAGE_NONE => $values
      );
    }
  }
  return $entity;
}

/**
 * Get the list of domain_entity field type instances.
 * @return Array of key(field_id) => field_instance_name
 */
function domain_entity_field_instances() {
  // First check the static cache for a domain_entity field instances array.
  $domain_entity_field_instances = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($domain_entity_field_instances)) {
    $query = db_select('field_config', 'fc');
    $query->condition('fc.type', 'domain_entity', '=');
    $query->condition('fc.active', TRUE, '=');
    $query->fields('fc', array('id', 'field_name'));
    $domain_entity_field_instances = $query->execute()->fetchAll(PDO::FETCH_KEY_PAIR);
  }

  return $domain_entity_field_instances;
}

/**
 * Get the list of domain_entity field type instances.
 * @return String the name of the bundle field instance
 */
function domain_entity_entity_field_instance($entity_type) {
  // First check the static cache for a domain_entity field instances array.
  $domain_entity_entity_field_instance = &drupal_static(__FUNCTION__);
  // If it did not exist, init the array.
  if (!isset($domain_entity_entity_field_instance)) {
    $domain_entity_entity_field_instance = array();
  }
  // Look for the instance for this type if it's not done.
  if (!isset($domain_entity_entity_field_instance[$entity_type])) {
    $domain_entity_field_instances = domain_entity_field_instances();
    $query = db_select('field_config_instance', 'fci');
    $query->condition('fci.entity_type', $entity_type, '=');
    $query->condition('fci.field_name', $domain_entity_field_instances, 'IN');
    $query->fields('fci', array('field_name','data'));
    $field_instance = $query->execute()->fetchAll();
    if(isset($field_instance[0])) {
      $domain_entity_entity_field_instance[$entity_type] = array(
        'name' => $field_instance[0]->field_name,
        'settings' => unserialize($field_instance[0]->data),
      );
    } else {
      return FALSE;
    }


  }

  return $domain_entity_entity_field_instance[$entity_type];
}

/**
 * Implements hook_entity_info_alter(). Make sure entities used by domain_entity are fieldable.
 */
function domain_entity_entity_info_alter(&$entity_info) {
  $entities = domain_entity_allowed_entity_types();
  foreach ($entities as $entity_name => $entity_bundles) {
    $entity_info[$entity_name]['fieldable'] = TRUE;
  }
}

/**
 * Implements hook_field_info().
 */
function domain_entity_field_info() {
  return array(
    'domain_entity' => array(
      'label' => t('Domain'),
      'description' => t('This field stores the domain ID\'s.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => DOMAIN_ENTITY_BEHAVIOR_AUTO,
      'default_formatter' => 'hidden',
      'property_type' => 'domain_entity',
      'property_callbacks' => array('domain_entity_property_info_callback'),
    ),
  );
}

/**
 * Implements of hook_field_is_empty().
 */
function domain_entity_field_is_empty($item, $field) {
  if ($field['type'] == 'domain_entity') {
    return !isset($item['domain_id']) || $item['domain_id'] == NULL;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function domain_entity_field_widget_info() {
  return array(
    DOMAIN_ENTITY_BEHAVIOR_AUTO => array(
      'label' => t('Affiliate automatically entities to a value'),
      'field types' => array('domain_entity'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    // This widget allow multiple domain attachment.
    DOMAIN_ENTITY_BEHAVIOR_USER => array(
      'label' => t('User choose entities affiliation (with a default value)'),
      'field types' => array('domain_entity'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_error().
 */
function domain_entity_field_widget_error($element, $error, $form, &$form_state) {
  if ($error['error'] == 'domain_entity') {
    form_error($element['domain_id'], $error['message']);
  }
}

/**
* Implements hook_field_widget_form().
*/
function domain_entity_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $current_domain = domain_get_domain();

  $allowed_entity_types = domain_entity_allowed_entity_types();
  $site_domains = domain_domains();
  $checkboxes = array();
  foreach ($site_domains as $site_domain) {
    $checkboxes[$site_domain['domain_id']] = $site_domain['sitename'];
  }

  // set the domain default value if no value has been set :
  $default_value = array();
  if (!isset($items[0]) || empty($items[0]) || !isset($items[0]['domain_id'])) {
    // Get default bundle value,
    // e.g (all, current_domain, list(domain_id)).
    $default_bundle_values = reset($allowed_entity_types[$instance['entity_type']][$instance['bundle']]);
    if (in_array('all', $default_bundle_values)) {
      foreach ($site_domains as $domain) {
        $default_value[$domain['domain_id']] = $domain['domain_id'];
      }
    }
    elseif (in_array('current_domain', $default_bundle_values)) {
      $default_value[$current_domain['domain_id']] = $current_domain['domain_id'];
    }
    else {
      foreach ($default_bundle_values as $did) {
        $default_value[$did] = $did;
      }
    }
  } else {
    foreach($items as $delta => $item) {
      $default_value[$item['domain_id']] = $item['domain_id'];
    }
  }

  // Add a checkboxes for domain id's:
  $element['domain_id'] = array(
    '#type' => 'checkboxes',
    '#options' => $checkboxes,
    '#title' => t('Domain'),
    '#default_value' => $default_value,
    '#required' => TRUE,
    '#element_validate' => array('domain_entity_widget_multiple_values_form_validate'),
    '#entity_type' => $instance['entity_type'],
  );

  if (!user_access('set domain access status for all entities')) {
    // Disable the domain checkbox that the user cannot edit.
    global $user;
    $user_granted_domain_ids = domain_get_user_domains($user);
    $is_editable = TRUE;
    foreach ($site_domains as $domain) {
      // We let the super user override this restriction.
      if(!in_array($domain['domain_id'], $user_granted_domain_ids) && $user->uid != 1) {
        $element['domain_id'][$domain['domain_id']]['#disabled'] = TRUE;
        $is_editable = FALSE;
      } else {
        $is_editable = TRUE;
      }
    }
    if(!$is_editable) {
      $element['domain_id']['#disabled'] = TRUE;
    }
  }
  if ($widget['type'] == DOMAIN_ENTITY_BEHAVIOR_AUTO) {
    $element['domain_id']['#access'] = FALSE;
  }
  return $element;
}

/**
 * Widget form validate,
 * handle checkboxes to save it as multiple field values (delta).
 */
function domain_entity_widget_multiple_values_form_validate($element, &$form_state, $form) {
  $entity_type = isset($element['#entity_type']) ? $element['#entity_type'] : FALSE;
  if (!in_array($entity_type, array_keys(domain_entity_allowed_entity_types()))) {
    return;
  }
  $values = $element['#value'];
  $active_domain = array();
  foreach ($values as $domain_id => $active) {
    if($active) {
      $active_domain[] = array('domain_id' => $domain_id);
    }
  }
  $items = array();
  foreach ($active_domain as $domain) {
    $items[] = $domain;
  }
  // Emulate multivalue field. Unset last parent to prevent errors.
  array_pop($element['#parents']);
  form_set_value($element, $items, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function domain_entity_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'domain_entity') {
    $form['instance']['required']['#default_value'] = TRUE;
    $form['instance']['required']['#disabled'] = TRUE;
    $form['field']['cardinality']['#value'] = FIELD_CARDINALITY_UNLIMITED;
    $form['field']['cardinality']['#disabled'] = TRUE;
    $form['field']['cardinality']['#description'] = t('This field widget allow only unlimited values (in fact it will be the number of active domain).');
  }
}

/**
 * Callback to alter the property info of domain fields.
 *
 * @see domain_entity_field_info().
 */
function domain_entity_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<domain_entity>' : 'domain_entity';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['property info'] = domain_entity_field_data_property_info($name);

  unset($property['query callback']);
  unset($property['auto creation']);
}

/**
 * Defines info for the properties of the domain_entity field data structure.
 */
function domain_entity_field_data_property_info($name = NULL) {
  return array(
    'domain_id' => array(
      'label' => t('Domain ID'),
      'description' => !empty($name) ? t('Domain ID value of field %name', array('%name' => $name)) : '',
      'type' => 'int',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );
}

/**
 * Create a field instance.
 * @param $field_name
 * @param $field_type
 * @param $required
 * @param $entity_type
 * @param $bundle
 * @param $label
 * @param $description
 * @param $weight
 */
function domain_entity_create_field_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, $widget, $description = NULL, $weight = 0, $display = array()) {
  // Look for or add the specified field to the requested entity bundle.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => FALSE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'required' => $required,
      'settings' => array(),
      'display' => array(),
      'description' => $description,
      'default_value' => array(array('value' => 0)),
      'widget' => array(
        'type' => $widget
      ),
      'display' => array(),
    );

    $entity_info = entity_get_info($entity_type);

    // Spoof the default view mode and node teaser so its display type is set.
    $entity_info['view modes'] += array(
      'default' => array(),
      'node_teaser' => array(),
    );

    foreach ($entity_info['view modes'] as $view_mode => $data) {
      $instance['display'][$view_mode] = $display + array(
        'label' => 'hidden',
        'type' => 'hidden',
        'settings' => array(),
        'weight' => $weight,
      );
    }

    field_create_instance($instance);
  }
}

/**
 * Helper function to active the domain field on all bundle of a list of entity type.
 * @param $entity_types
 */
function domain_entity_types_enable_domain_field($entity_types) {
  // Common settings.
  $field_type = 'domain_entity';
  $label = t('Domain');
  $required = TRUE;
  $entities_to_update = array();

  // Create fields instance.
  foreach ($entity_types as $entity_type => $bundles) {
    $field_name = 'domain_' . $entity_type;
    if (strlen($field_name)> 21) {
      $field_name = substr('domain_' . md5($field_name), 0, -7);
    }
    $entity_info = entity_get_info($entity_type);

    // Look for or add the specified field to the requested entity bundle.
    $field = field_info_field($field_name);

    if (empty($field)) {
      if (isset($entity_info['base table'])) {
        $entity_key = $entity_info['entity keys']['id'];
        $query = db_select($entity_info['base table'], 'b');
        $query->addField('b', $entity_key);
        $unaffiliated_entities = $query->execute()->fetchAll();
        if (!empty($unaffiliated_entities)) {
          $entities_to_update[$entity_type] = array();
          foreach ($unaffiliated_entities as $key => $value) {
            $id = $value->$entity_key;
            $entities_to_update[$entity_type][] = $id;
          }

        }
      }
    }

    foreach ($bundles as $bundle => $widget) {
      // Look for or add the specified field to the requested entity bundle.
      $instance = field_info_instance($entity_type, $field_name, $bundle);
      if (empty($instance)) {
        domain_entity_create_field_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, key($widget));
        drupal_set_message(t('Domain Access behaviour \'@widget\' has been enabled on the bundle @type of @entity entity type', array('@widget' => key($widget), '@type' => $bundle, '@entity' => $entity_type)));
      }
    }
  }
  // Clear cache as we are going to update existing entities field values.
  field_cache_clear();

  // Bypass access restriction to allow the current user to access the entity that are not already assigned.
  $domain_entity_allowed_entity_types_backup = variable_get('domain_entity_allowed_entity_types', array());
  variable_set('domain_entity_allowed_entity_types_backup', $domain_entity_allowed_entity_types_backup);
  variable_set('domain_entity_allowed_entity_types', array());

  $operations = array();
  foreach ($entities_to_update as $entity_type => $entities) {
    foreach($entities as $entity_id) {
      $operations[] = array('_domain_entity_update_entity_defaut_value', array($entity_type, $entity_id));
    }
  }
  $batch = array(
    'operations' => $operations,
    'title' => t('Update existing entities domain affiliation default values'),
    'error_message' => st('The domain access update has encountered an error.'),
    'finished' => '_domain_entity_update_entity_defaut_value_finished',
  );
  batch_set($batch);
}

/**
 * Batch operation processing callback.
 */
function _domain_entity_update_entity_defaut_value($entity_type, $entity_id, &$context) {
  $entity = entity_load_single($entity_type, $entity_id);
  if ($entity) {
    variable_set('domain_entity_allowed_entity_types', variable_get('domain_entity_allowed_entity_types_backup', array()));
    entity_save($entity_type, $entity);
    variable_set('domain_entity_allowed_entity_types', array());
    $context['results'][] = $entity_type . ' - Id : ' . $entity_id . ' updated.';
    $context['message'] = t('Updated: %entity_type - ID : %entity_id.', array('%entity_type' => $entity_type, '%entity_id' => $entity_id));
  }

}

/**
 * Batch operation finished callback.
 */
function _domain_entity_update_entity_defaut_value_finished() {
  // Restore entity type domain access.
  variable_set('domain_entity_allowed_entity_types', variable_get('domain_entity_allowed_entity_types_backup', array()));
  variable_del('domain_entity_allowed_entity_types_backup');
}
